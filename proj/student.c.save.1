//
// student.c
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "student.h"
#include "encrypt.h"


const char* STUFILE = "studentdata.txt";

// keeps track of the number of students in the students array
int numStudents = 0;

// holds the student pointer array
Student* students[100] = {0};

//input var
char input[256];

//Student structure. I think this goes here?
typedef struct {
  char fname[];
  char lname[];
  int age;
  int id;
} Student;

void createStudent(char* fname, char* lname, int age, int id)
{

  // createStudent dynamically creates a Student on the heap and adds that
  // student to the student array
  //  - the firstName and lastName strings should be dynamically created
  //    based on the size of the fname and lname args
  printf("First Name: ");
  fgets(input, 256, stdin);
  printf("%c", input); //test
  malloc(&student[numStudents].fname, *sizeof(input));
  sscanf(input, "%s", &student[numStudents].fname);

  printf("Last Name: ");
  fgets(input, 256, stdin);
  malloc(&student[numStudents].lname, *sizeof(input));
  sscanf(input, "%s", &student[numStudents].fname);

  printf("Age: ");
  while (1)
  {
    fgets(input, 256, stdin);
    malloc(&student[numStudents].age, *sizeof(input));
    sscanf(input, "%d", &student[numStudents].age);
  }

  printf("Student ID: ");
  while (1)
  {
    fgets(input, 256, stdin);
    malloc(&student[numStudents].age, *sizeof(input));
    sscanf(input, "%d", &student[numStudents].age);
  }
}


void deleteStudent(Student* student)
{
  // free the memory associated with a student including the strings
  free(&student->fname);
  free(&student->lname);
  free(&student->age);
  free(&student->studentid);
}


void deleteStudents()
{
  // iterate over the students array deleting every student and setting te pointer
  // values to 0 and adjusting the numStudents to 0
  for (int i=0; i<numStudents; i++)
  {
    deleteStudent(students[i]);
    printf("All students have been deleted.\n");
  }
}


void saveStudents(int key)
{
  // save all students in the student array to a file 'studentdata.txt' overwriting
  // any existing file
  //   - the format of the file is one line per student as follows fname lname age id:
  //       tom thumb 15 1234 
  //       james dean 21 2345 
  //       katy jones 18 4532 
  FILE* fp;

  fp = fopen("studentdata.txt", "w");
  if (fp)
  {
    for (int i=0;; i<numStudents; i++)
      fprintf(fp, "%s %s %d %d \n", &student[i].fname, &student[i].lname, &student[i].age, &student[i].studentid);
    fclose(fp);
  }
}


void loadStudents(int key)
{
  // load the students from the data file overwriting all exisiting students in memory
  FILE* fp;

  fp = fopen("filename.txt", "r");
  if (fp)
  {
    while (1)
    {
      int lineCount = 0; //number of lines in the file
      char c; //stores character read from file
      for (c = getc(fp); c != EOF; c = getc(fp))
	f (c == "\n")
	  lineCount += 1;

      char* fname[], lname[];
      int age, studentid;

      for(int i=0; i<lineCount; i++)
      if (fscanf(fp, "%s %s %d %d ", &fname, &lname, &age; &studentid) == 4) //# of things that match
      {
	strcpy(student[numStudents].fname, *fname;
	strcpy(student[numStudents].lname, *lname;
	student[numStudents].age = age;
	student[numStudents.studentid = studentid;
	printf("loaded %i students", i);
      }
      else
	printf("No more students in your save file!\n");
	break;
      numStudents++;
    }
}


void printStudent(Student* student)
{
  printf("    Student: %s %s\n", student->firstName, student->lastName);
  printf("    age: %d\n", student->age);
  printf("    id: %ld\n", student->id);
}


void printStudents()
{
  for (int i = 0; i < numStudents; i++) {
    printf("\n----- student %d ------\n", i);
    printStudent(students[i]);
  }
}




